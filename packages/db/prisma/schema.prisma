// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Experience {
  id                 Int      @id @default(autoincrement())
  authorId           String
  firstName          String?
  lastName           String?
  email              String?
  phone              String?
  title              String
  description        String
  price              Float
  free               Boolean @default(false)
  timeline           String
  city               String?
  location           Json
  locationDescription String
  qualifications     String
  provided           String
  guestRequirements  String
  minAge             Int
  activityLevel      String
  skillLevel         String
  maxAttendees       Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  profileImage       String?
  photos             String[]
  slugId             String  @unique
  stripeProductId    String
  stripePriceId      String
  verified           Boolean  @default(false)
  isFutureExperience    Boolean @default(false)
  isExternalListing     Boolean @default(false)
  isFull                Boolean @default(false)
  externalListingLink   String ?
  externalHostName      String ?
  notifyIFrameLink      String?

  profileId         String?
  profile           Profile? @relation(fields: [profileId], references: [id])

  categoryId         Int
  category           Category @relation(fields: [categoryId], references: [id])

  registration      Registration[] // Relation field
  availability      ExperienceAvailability[] // Relation field

  @@index([authorId])
}

model ExperienceAvailability {
  id          Int       @id @default(autoincrement()) @unique
  experienceId Int
  date        DateTime? 
  startTime   DateTime?
  endTime     DateTime?
  experience  Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  registrations Registration[] // Relation field

  @@index([experienceId])
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  experiences Experience[] // Relation field
}

model Registration {
    id           String   @id @default(cuid())
    userId       String
    registrantFirstName String
    registrantLastName  String
    partySize    Int
    email        String
    phone        String?
    textNotificationsEnabled    Boolean @default(false)
    experienceId Int
    availabilityId Int
    stripeCheckoutSessionId String
    status       String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    experience   Experience @relation(fields: [experienceId], references: [id])
    availability    ExperienceAvailability @relation(fields: [availabilityId], references: [id])

    @@index([userId])
    @@index([experienceId])
}

model Profile {
    id          String  @id @default(cuid())
    userId      String  @unique
    firstName   String?
    lastName    String?
    bio         String?
    social      String?
    insta       String?
    facebook    String?
    venmo       String?
    zelle       String?
    email       String?
    phone       String?
    profileImage    String?

    experiences Experience[]
}
